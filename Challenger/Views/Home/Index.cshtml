@using Challenger.DataLayer
@model Challenger.Models.HomeChallengesViewModel


<div class="container">
    <table class="table table-hover">
        <thead class="thead-inverse">
            <tr>
                <td>
                    <h3>Challenger</h3>
                </td>
                <td>
                    <h3>Asignee</h3>
                </td>
                <td>
                    <h3>Challenge</h3>
                </td>
                <td>
                    <h3>Type</h3>
                </td>
                <td>
                    <h3>Status</h3>
                </td>
                <td>
                    <h3>Due Date</h3>
                </td>
            </tr>
        </thead>

        @foreach (var item in Model.Challenges)
        {
            <tr>
                <td>
                    @Html.ActionLink(item.Challenger, "OtherIndex", "UserProfile", new { username = item.Challenger }, new { @class = "username" })
                </td>
                <td>
                    @Html.ActionLink(item.Assignee, "OtherIndex", "UserProfile", new { username = item.Assignee }, new { @class = "username" })
                </td>
                <td>
                    @if (item.Assignee != User.Identity.Name || item.Status == Task.ChallengeStatus.Done
                                                            || item.Status == Task.ChallengeStatus.Expired
                                                            || item.Status == Task.ChallengeStatus.Decline)
                    {
                        @Html.ActionLink(item.Title, "Details", "Challenge", new { id = item.ID }, new { @class = "username" })
                    }
                    else
                    {
                        @Html.ActionLink(item.Title, "UpdateChallenge", "Challenge", new { id = item.ID }, new { @class = "username" })
                    }
                    
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Type)
                </td>
                <th>
                    @if (item.Status == Task.ChallengeStatus.Accept)
                    {

                        <img src="~/Icons/Taken.png" id="input_img">

                    }
                    @if (item.Status == Task.ChallengeStatus.Sent)
                    {

                        <img src="~/Icons/Created.png" id="input_img">

                    }
                    @if (item.Status == Task.ChallengeStatus.Decline)
                    {

                        <img src="~/Icons/Declined.png" id="input_img">

                    }
                    @if (item.Status == Task.ChallengeStatus.Done)
                    {

                        <img src="~/Icons/Done.png" id="input_img">

                    }
                    @if (item.Status == Task.ChallengeStatus.Expired)
                    {

                        <img src="~/Icons/Expired.png" id="input_img">

                    }
                    @if (item.Status == Task.ChallengeStatus.InProcess)
                    {

                        <img src="~/Icons/InProgress.png" id="input_img">

                    }
                    @Html.DisplayFor(modelItem => item.Status)
                </th>
                <td>
                    @if (item.DueDate != null)
                    {
                        <img alt="Level" src="~/Icons/time.png" id="input_img">
                        @Html.DisplayFor(modelItem => item.DueDate)
                    }
                    
                </td>
            </tr>
        }
    </table>


</div>
